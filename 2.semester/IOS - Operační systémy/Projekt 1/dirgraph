#!/bin/sh
POSIXLY_CORRECT=yes

NF=0
ND=0
N=0
I=0
ARGC=$#

CAT_1=0
CAT_2=0
CAT_3=0
CAT_4=0
CAT_5=0
CAT_6=0
CAT_7=0
CAT_8=0
CAT_9=0

my_print(){
    printf "${1}"
	i=0
	LIMIT=${2}
	while [ "$i" -ne "$LIMIT" ]
	do
    	printf "#"
    	i=$((i + 1))
	done
}

my_print_N(){
    printf "${1}"
	i=0
	LIMIT=$(expr ${2} \* $max_cols \/ $max_line )
	while [ "$i" -ne "$LIMIT" ]
	do
    	printf "#"
    	i=$((i + 1))
	done
}


normal_print(){
	my_print "  <100 B  : " "$CAT_1"
	echo
	my_print "  <1 KiB  : " "$CAT_2"
	echo
	my_print "  <10 KiB : " "$CAT_3"
	echo
	my_print "  <100 KiB: " "$CAT_4"
	echo
	my_print "  <1 MiB  : " "$CAT_5"
	echo 
	my_print "  <10 MiB : " "$CAT_6"
	echo
	my_print "  <100 MiB: " "$CAT_7"
	echo
	my_print "  <1 GiB  : " "$CAT_8"
	echo
	my_print "  >=1 GiB : " "$CAT_9"
	echo 
}


N_print(){
	my_print_N "  <100 B  : " "$CAT_1"
	echo
	my_print_N "  <1 KiB  : " "$CAT_2"
	echo
	my_print_N "  <10 KiB : " "$CAT_3"
	echo
	my_print_N "  <100 KiB: " "$CAT_4"
	echo
	my_print_N "  <1 MiB  : " "$CAT_5"
	echo  
	my_print_N "  <10 MiB : " "$CAT_6"
	echo
	my_print_N "  <100 MiB: " "$CAT_7"
	echo
	my_print_N "  <1 GiB  : " "$CAT_8"
	echo
	my_print_N "  >=1 GiB : " "$CAT_9"
	echo 
}


max_value(){
	max=0
	while [ $# -ne 0 ]; do
		if [ $1 -gt $max ]; then
			max=$1
			fi
		shift

	done
	printf %s "$max"
}


err(){
    echo "${1}" >&2
}



recursive_search() {
	if [ ! -r "$1" ]; then 
        err "Nepovoleny pristup do adresara" && exit 1
    fi
    
	
	for ADRESS in "$1".[!.]* "$1"..?* "$1"*  ; do				
		if [ ! -e "$ADRESS" ]; then 
		continue
		fi

		CURRENT="${ADRESS##*/}"
       

   if [ "$I" -eq 1 ] ; then
		x=$(printf %s "$CURRENT" | sed -r "s/$FILE_ERE//")
		[ "$x" != "$CURRENT" ] && continue
	fi

		if [ -f "$ADRESS" ] ; then			
			NF=$((NF+1))
			SIZE=$(wc -c <"$ADRESS")
            


		 if [ $SIZE -lt 100 ]; then
            CAT_1=$((CAT_1+1))
        elif [ $SIZE -lt 1024 ]; then
            CAT_2=$((CAT_2+1))
        elif [ $SIZE -lt 10240 ]; then
            CAT_3=$((CAT_3+1))
        elif [ $SIZE -lt 102400 ]; then
            CAT_4=$((CAT_4+1))
        elif [ $SIZE -lt 1048576 ]; then
            CAT_5=$((CAT_5+1))
        elif [ $SIZE -lt 10485760 ]; then
            CAT_6=$((CAT_6+1))
        elif [ $SIZE -lt 104857600 ]; then
            CAT_7=$((CAT_7+1))
        elif [ $SIZE -lt 1073741824 ]; then
            CAT_8=$((CAT_8+1))
        else
            CAT_9=$((CAT_9+1))
        fi

		elif [ -d "$ADRESS" ] ; then                         
			ND=$((ND+1))
			recursive_search "$ADRESS/"


		fi
	done
}


while getopts :i:n o
do	case "$o" in
		i) FILE_ERE="$OPTARG" && I=1;;
		n) N=1;;
		*) err "Neplatne zadany prepinac"
		   exit 1;;
	esac
done



if [ "$ARGC" -eq 0 ]; then
	DIR=$PWD
	ND=1
else
	if [ "$OPTIND" -eq "$ARGC" ]; then
		shift $(($OPTIND - 1))	
		DIR="$*"
        if [ -d "${DIR}" ]; then 
        ND=1

        else 
            if [ -f "${DIR}" ]; then
                err "${DIR} je subor";
                exit 1

            else
                err "${DIR} je neplatna zlozka" && exit 1

            fi
        fi
	else
		if [ $(($OPTIND - 1)) -eq "$ARGC" ]; then
			DIR=$PWD
			ND=1
		else
			err "Zle zadane argumenty!" && exit 1
		fi
	fi
fi

max_cols=0

if [ "$N" -eq 1 ]; then
	if [ -t 1 ]; then
		max_cols=$(tput cols)
		max_cols=$((max_cols-1))
	else
		max_cols=79
	fi
fi

recursive_search "${DIR%/}/"

echo "Root directory: $DIR"
echo "Directories: $ND"
echo "All files: $NF"
echo "File size histogram: "

if [ "$N" -eq 0 ]; then 

normal_print

fi

max_line=$(max_value $CAT_1 $CAT_2 $CAT_3 $CAT_4 $CAT_5 $CAT_6 $CAT_7 $CAT_8 $CAT_9)

if [ "$N" -eq 1 ]; then 
	max_cols=$((max_cols-13))
	if [ "$max_cols" -lt 14 ]; then
		err "Prilis maly terminal!" && exit 1
	fi
	if [ "$max_line" -gt "$max_cols" ]; then 
		N_print
	else 
	normal_print
	fi



fi
exit 0




